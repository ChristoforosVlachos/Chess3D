#version 330 core

layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;
layout(location = 2) in vec2 vertexUV;

layout(location = 3) in vec3 morphPosition_modelspace;
layout(location = 4) in vec3 morphNormal_modelspace;
layout(location = 5) in vec2 morphUV;

uniform mat4 P;
uniform mat4 V;
uniform mat4 M;
uniform vec3 cameraPosition = vec3(0);
uniform int isTranslucent = 0;
uniform float morphFactor = 0;

out vec3 vertex_position_worldspace;
out vec3 vertex_position_cameraspace;
out vec3 vertex_normal_worldspace;
out vec3 vertex_normal_cameraspace;
out vec2 vertex_UV;
out vec3 reflectedVector;
out vec3 refractedVector;

const vec4 plane = vec4(0, 1, 0, -0.005);

void main() {

    vec3 pos, norm;
    vec2 uv;
    if (morphFactor > 0)
    {
        pos = (1 - morphFactor) * vertexPosition_modelspace + morphFactor * morphPosition_modelspace;
        norm = (1 - morphFactor) * vertexNormal_modelspace + morphFactor * morphNormal_modelspace;
        uv = (1 - morphFactor) * vertexUV + morphFactor * morphUV;
    }
    else 
    {
        pos = vertexPosition_modelspace;
        norm = vertexNormal_modelspace;
        uv = vertexUV;
    }

    // Output position of the vertex
    gl_Position =  P * V * M * vec4(pos, 1);

    gl_ClipDistance[0] = dot(M * vec4(pos, 1), plane);
    
    // FS
    vertex_position_worldspace = (M * vec4(pos, 1)).xyz;
    vertex_position_cameraspace = (V * M * vec4(pos, 1)).xyz;
    vertex_normal_worldspace = (M * vec4(norm, 0)).xyz;
    vertex_normal_cameraspace = (V * M * vec4(norm, 0)).xyz;
    vertex_UV = uv;

    if (isTranslucent != 0)
    {
        vec3 viewVector = normalize(vertex_position_worldspace - cameraPosition);
        reflectedVector = reflect(viewVector, normalize(vertex_normal_worldspace));
        refractedVector = refract(viewVector, normalize(vertex_normal_worldspace), 1.0/1.52);
    }
}
#version 330 core

in vec4 clipSpace;
in vec2 textureCoords;
in vec3 toCameraVector;

out vec4 out_Color;

uniform sampler2D waterTexture;
uniform sampler2D reflectionTexture;
uniform sampler2D dudvMap;

uniform float moveFactor;

const float waveStrength = 0.01;


void main(void) {

	float moveFactorFract = fract(moveFactor);

	vec2 ndc = (clipSpace.xy/clipSpace.w)/2.0 + 0.5; //perspective divide & convert from [-1,1]->[0,1]
	vec2 reflectTexCoords = vec2(ndc.x, -ndc.y);

	vec2 distortedTexCoords = texture(dudvMap, vec2(textureCoords.x + moveFactorFract, textureCoords.y)).rg*0.1;
	distortedTexCoords = textureCoords + vec2(distortedTexCoords.x, distortedTexCoords.y + moveFactorFract);
	vec2 totalDistortion = (texture(dudvMap, distortedTexCoords).rg * 2.0 - 1.0) * waveStrength;

	vec4 waterColor = texture(waterTexture, vec2(distortedTexCoords.x + moveFactorFract, distortedTexCoords.y + moveFactorFract));

	reflectTexCoords += totalDistortion;
	reflectTexCoords.x = clamp(reflectTexCoords.x, 0.001, 0.999);
	reflectTexCoords.y = clamp(reflectTexCoords.y, -0.999, -0.001);

	vec4 reflectColor = texture(reflectionTexture, reflectTexCoords);

	out_Color = vec4(mix(waterColor, reflectColor, 0.5).rgb, 0.5);
}
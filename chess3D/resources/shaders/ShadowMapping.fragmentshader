#version 330 core

#define MAX_LIGHTS 4

in vec3 vertex_position_worldspace;
in vec3 vertex_position_cameraspace;
in vec3 vertex_normal_worldspace;
in vec3 vertex_normal_cameraspace;
in vec2 vertex_UV;
in vec3 reflectedVector;
in vec3 refractedVector;

uniform samplerCube depthMap[MAX_LIGHTS];
uniform sampler2D diffuseColorSampler;
uniform samplerCube enviroMap;

uniform int useTexture = 0;
uniform mat4 V;
uniform vec3 viewPos;

uniform float deleteHeight = 0;
uniform float top;
uniform float bottom;

uniform int lights_count;

uniform int isTranslucent = 0;

uniform float refractionCoeff = 0.5;

// array of offset direction for sampling
vec3 gridSamplingDisk[20] = vec3[]
(
   vec3(1, 1,  1), vec3( 1, -1,  1), vec3(-1, -1,  1), vec3(-1, 1,  1), 
   vec3(1, 1, -1), vec3( 1, -1, -1), vec3(-1, -1, -1), vec3(-1, 1, -1),
   vec3(1, 1,  0), vec3( 1, -1,  0), vec3(-1, -1,  0), vec3(-1, 1,  0),
   vec3(1, 0,  1), vec3(-1,  0,  1), vec3( 1,  0, -1), vec3(-1, 0, -1),
   vec3(0, 1,  1), vec3( 0, -1,  1), vec3( 0, -1, -1), vec3( 0, 1, -1)
);


// Phong 
// light properties
struct Light {
    vec4 La;
    vec4 Ld;
    vec4 Ls;
    vec3 lightPosition_worldspace;
    float power;
    float far_plane;
};
uniform Light light[MAX_LIGHTS];

// materials
struct Material {
    vec4 Ka; 
    vec4 Kd;
    vec4 Ks;
    float Ns; 
};
uniform Material mtl;

out vec4 fragmentColor;

vec4 phong(Light light, float visibility);
float ShadowCalculation(Light light, samplerCube depth_map_sampler, vec3 fragPositionLightspace);



void main() {
    if (deleteHeight > 0)
    {
        float height = top - bottom;
        float middle = height / 2.0f;
        if (vertex_position_worldspace.y < 3 + middle + middle * deleteHeight && vertex_position_worldspace.y > 3 + middle - middle * deleteHeight)
        {
            discard;
        }
    }
    

    // Task 4.3
    float shadow = 0;
    float visibility = 1;
    vec4 color = vec4(0);

    for (int i = 0; i < lights_count; i++)
    {
        shadow += ShadowCalculation(light[i], depthMap[i], vertex_position_worldspace);
    }
    shadow /= float(lights_count);

    visibility = 1.0 - shadow;

    for (int i = 0; i < lights_count; i++)
    {
        color += phong(light[i], visibility);
    }
    
    fragmentColor = color;

    if (isTranslucent != 0)
    {
        vec4 reflectedColor = texture(enviroMap, reflectedVector);
        vec4 refractedColor = texture(enviroMap, refractedVector);
        vec4 enviroColor = mix(reflectedColor, refractedColor, refractionCoeff);

        fragmentColor = mix(fragmentColor, enviroColor, 0.6);
    }
}



float ShadowCalculation(Light light, samplerCube depth_map_sampler, vec3 fragPos){
    // Given the position of a fragment in lightspace coordinates
    // We sample the depth buffer to see whether or not the fragment is shadowed
    
    vec3 fragToLight = fragPos - light.lightPosition_worldspace;
    float currentDepth = length(fragToLight);

    // improved PCF
    float shadow = 0.0;
    float bias = 0.25;
    int samples = 20;
    float viewDistance = length(viewPos - fragPos);
    float diskRadius = (1.0 + (viewDistance / light.far_plane)) / 30.0;
    for(int i = 0; i < samples; ++i)
    {
        float closestDepth = texture(depth_map_sampler, fragToLight + gridSamplingDisk[i] * diskRadius).r;
        closestDepth *= light.far_plane;   // undo mapping [0;1]
        if(currentDepth - bias > closestDepth)
            shadow += 1.0;
    }
    shadow /= float(samples);

    return shadow;

}


vec4 phong(Light light, float visibility) {
   
    vec4 _Ks = mtl.Ks;
    vec4 _Kd = mtl.Kd;
    vec4 _Ka = mtl.Ka;
    float _Ns = mtl.Ns;

    // use texture for materials
    if (useTexture == 1) {
        _Ks = vec4(texture(diffuseColorSampler, vertex_UV).rgb, 1.0);
        _Kd = vec4(texture(diffuseColorSampler, vertex_UV).rgb, 1.0);
        _Ka = vec4(0.1, 0.1, 0.1, 1.0);
        _Ns = 10;
    }
    
    // model ambient intensity (Ia)
    vec4 Ia = light.La * _Ka;

    // model diffuse intensity (Id)
    vec3 N = normalize(vertex_normal_cameraspace); 
    vec3 L = normalize((V * vec4(light.lightPosition_worldspace, 1)).xyz - vertex_position_cameraspace);
    float cosTheta = clamp(dot(L, N), 0, 1);
    vec4 Id = light.Ld * _Kd * cosTheta; 

    // model specular intensity (Is)
    vec3 R = reflect(-L, N);
    vec3 E = normalize(- vertex_position_cameraspace);
    float cosAlpha = clamp(dot(E, R), 0, 1);
    float specular_factor = pow(cosAlpha, _Ns);
    vec4 Is = light.Ls * _Ks * specular_factor;

    //model the light distance effect
    float distance = length(light.lightPosition_worldspace - vertex_position_worldspace);
    float distance_sq = distance * distance;

    // final fragment color
    vec4 color = vec4(
        Ia + 
        visibility * Id * light.power / distance_sq +   // Task 4.3 Use visibility
        visibility * Is * light.power / distance_sq);

    return color;

}